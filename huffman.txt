#include <bits/stdc++.h>
using namespace std;

// Define a structure for a Huffman tree node
struct HuffmanNode
{
    char data;
    int frequency;
    HuffmanNode *left;
    HuffmanNode *right;
};

// Define a custom comparator for priority queue
struct CompareNodes
{
    bool operator()(HuffmanNode *left, HuffmanNode *right)
    {
        return left->frequency > right->frequency;
    }
};

// Function to build the Huffman tree
HuffmanNode *buildHuffmanTree(unordered_map<char, int> &frequencies)
{
    priority_queue<HuffmanNode *, vector<HuffmanNode *>, CompareNodes> minHeap;
    for (auto &entry : frequencies)
    {
        HuffmanNode *node = new HuffmanNode;
        node->data = entry.first;
        node->frequency = entry.second;
        node->left = nullptr;
        node->right = nullptr;
        minHeap.push(node);
    }
    while (minHeap.size() > 1)
    {
        HuffmanNode *left = minHeap.top();
        minHeap.pop();
        HuffmanNode *right = minHeap.top();
        minHeap.pop();

        HuffmanNode *mergedNode = new HuffmanNode;
        mergedNode->data = '\0'; // Internal node, not a character
        mergedNode->frequency = left->frequency + right->frequency;
        mergedNode->left = left;
        mergedNode->right = right;

        minHeap.push(mergedNode);
    }
    return minHeap.top();
}

// Function to generate Huffman codes and store them in a map
void generateHuffmanCodes(HuffmanNode *root, string code, unordered_map<char, string> &huffmanCodes)
{
    if (root == nullptr)
    {
        return;
    }
    if (root->data != '\0')
    {
        huffmanCodes[root->data] = code;
    }
    generateHuffmanCodes(root->left, code + "0", huffmanCodes);
    generateHuffmanCodes(root->right, code + "1", huffmanCodes);
}

// Function to encode a message using Huffman codes
string encodeMessage(const string &message, const unordered_map<char, string> &huffmanCodes)
{
    string encodedMessage;
    for (char c : message)
    {
        encodedMessage += huffmanCodes.at(c);
    }
    return encodedMessage;
}

int main()
{
    string filename;
    cout << "Enter the name of the file to encode and decode: ";
    cin >> filename;

    ifstream inputFile(filename);
    if (!inputFile)
    {
        cerr << "Error: File not found." << endl;
        return 1;
    }
    // file size
    inputFile.seekg(0, ios::end);
    streampos fileSize = inputFile.tellg();
    inputFile.seekg(0, ios::beg);

    string message;
    char ch;
    while (inputFile.get(ch))
    {
        message += ch;
    }
    inputFile.close();
    if (fileSize < 0)
    {
        cerr << "Error: Unable to determine file size." << endl;
        return 1;
    }

    cout << "\nFile size: " << fileSize << endl;

    // Step 1: Count symbol frequencies
    unordered_map<char, int> frequencies;
    for (char c : message)
    {
        frequencies[c]++;
    }

    // Step 2: Build the Huffman tree
    HuffmanNode *root = buildHuffmanTree(frequencies);

    // Step 3: Generate Huffman codes
    unordered_map<char, string> huffmanCodes;
    generateHuffmanCodes(root, "", huffmanCodes);
    cout << "\nHuffman Codes:" << endl;
    for (const auto &entry : huffmanCodes) {
        cout << entry.first << ": " << entry.second << endl;
    }
   
    clock_t start_time = clock();
    // Step 4: Encode the message
    string encodedMessage = encodeMessage(message, huffmanCodes);

    // Step 5: Output the encoded message
    cout << "\nEncoded Message: " << encodedMessage << endl;
    clock_t end_time = clock();
    double elapsed_time = double(end_time - start_time) / CLOCKS_PER_SEC;
    
    size_t spaceComplexity = fileSize; // Memory for input data
    spaceComplexity += sizeof(HuffmanNode) * frequencies.size(); // Memory for the Huffman tree
    spaceComplexity += huffmanCodes.size() * (sizeof(char) + sizeof(string)); // Memory for Huffman codes
    spaceComplexity += encodedMessage.size(); // Memory for the encoded message

    cout << "\nSpace Complexity: " << spaceComplexity << " bytes" << endl;
    cout << "\nElapsed time (seconds): " << fixed << elapsed_time << endl;

    return 0;
}

